# Azure DevOps pipeline for Azure deployment

variables:
- group: terraform-project

trigger: none
  #branches:
    #include:
    #- main

stages:
- stage: Validate
  displayName: Validate
  jobs:
  - job: validate
    pool:
      vmImage: ubuntu-latest
    steps:
    - bash: pip3 install checkov
      displayName: 'Install Checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only
    
    # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(SAStoken)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(containername) -backend-config=key=$(terraformkey)'
        backendType: 'selfConfigured'

  # Validate
    - task: TerraformCLI@0
      displayName: Validate Config
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - script: |
        set +e  # Disable immediate exit on error
        checkov -d $(System.DefaultWorkingDirectory) --output junitxml > $(System.DefaultWorkingDirectory)/TEST-checkov-report.xml
        checkov_exit_code=$?  # Capture the exit code
        set -e  # Enable exit on error

        if [ $checkov_exit_code -ne 0 ]; then
         echo "Checkov found errors, but continuing the pipeline..."
         exit 0  # Set exit code to 0 to prevent pipeline failure
        fi
    
      displayName: 'Check Terraform Files'
      name: TerraformCheck
    
    - task: PublishTestResults@2
      displayName: 'Publish Checkov Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFile: 'TEST-checkov-report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRuntitle: CheckOV Scan
        failTaskOnFailedTests: false
        publishRunAttachements: true

- stage: Plan
  displayName: Plan
  jobs:
  - job: plan
    pool:
      vmImage: ubuntu-latest
    steps:
    - bash: pip3 install checkov
      displayName: 'Install Checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only
  
    # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(SAStoken)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(containername) -backend-config=key=$(terraformkey)'
        backendType: 'selfConfigured'

  # Plan
    - task: TerraformCLI@0
      displayName: Plan Terraform 
      env:
        ARM_SAS_TOKEN: $(SAStoken)
        ARM_CLIENT_ID: $(az-clientid)
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_SUBSCRIPTION_ID: $(az-subscription1)
        ARM_TENANT_ID: $(az-tenantid)
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/main.tfplan'
        publishPlanResults: 'Terraform Plan'
    
    - script: |
        set +e  # Disable immediate exit on error
        cd $(System.DefaultWorkingDirectory)
        ls
        terraform show -json main.tfplan > $(System.DefaultWorkingDirectory)/main.json
        checkov -f $(System.DefaultWorkingDirectory)/main.json -o junitxml > $(System.DefaultWorkingDirectory)/plan-checkov-report.xml
        checkov_exit_code=$?
        set -e  # Enable exit on error

        if [ $checkov_exit_code -ne 0 ]; then
         echo "Checkov found errors, but continuing the pipeline..."
         exit 0  # Set exit code to 0 to prevent pipeline failure
        fi
      displayName: 'Scan and Verify Plan'
      name: checkovplanscan
      env:
        ARM_SAS_TOKEN: $(SAStoken)
        ARM_CLIENT_ID: $(az-clientid)
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_SUBSCRIPTION_ID: $(az-subscription1)
        ARM_TENANT_ID: $(az-tenantid)
    
    - task: PublishTestResults@2
      displayName: Publish Checkov Plan Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/plan-checkov-report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Plan Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true


# Approve
- stage: Approve
  displayName: Approve
  jobs:
  - job: approve
    displayName: Wait for approval
    pool: server
    steps: 
    - task: ManualValidation@0
      timeoutInMinutes: 60
      inputs:
        notifyUsers: 'bauerbrett1@gmail.com'
        instructions: 'Review the plan in the next hour'

- stage: Apply
  displayName: Apply
  jobs:
  - job: apply
    pool:
      vmImage: ubuntu-latest
    steps:

    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only

  # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(SAStoken)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(containername) -backend-config=key=$(terraformkey)'
        backendType: 'selfConfigured'

  # Apply
    - task: TerraformCLI@0
      displayName: Apply Terraform Deployment
      env:
        ARM_SAS_TOKEN: $(SAStoken)
        ARM_CLIENT_ID: $(az-clientid)
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_SUBSCRIPTION_ID: $(az-subscription1)
        ARM_TENANT_ID: $(az-tenantid)
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-auto-approve'