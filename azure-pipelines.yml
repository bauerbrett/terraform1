# Azure DevOps pipeline for Azure deployment

variables:
- group: terraform-project

trigger: none
  #branches:
    #include:
    #- main

stages:
- stage: Validate
  displayName: Validate
  jobs:
  - job: validate
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: tfinstall
      inputs:
        terraformVersion: 'latest'

    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only

  # Init
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform2connection'
        backendAzureRmResourceGroupName: 'AZLabs'
        backendAzureRmStorageAccountName: '$(storageaccount)'
        backendAzureRmContainerName: '$(containername)'
        backendAzureRmKey: '$(terraformkey)'

  # Validate
    - task: TerraformCLI@0
      displayName: Validate Config
      env:
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_CLIENT_ID: $(az_clientid)
        ARM_TENANT_ID: $(az_tenantid)
        ARM_SUBSCRIPTION_ID: $(az_subscription1)
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
- stage: Plan
  displayName: Plan
  jobs:
  - job: plan
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: tfinstall
      inputs:
        terraformVersion: 'latest'

    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only

  # Init
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform2connection'
        backendAzureRmResourceGroupName: 'AZLabs'
        backendAzureRmStorageAccountName: '$(storageaccount)'
        backendAzureRmContainerName: '$(containername)'
        backendAzureRmKey: '$(terraformkey)'

  # Plan
    - task: TerraformCLI@0
      displayName: Plan Terraform Deployment
      env:
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_CLIENT_ID: $(az_clientid)
        ARM_TENANT_ID: $(az_tenantid)
        ARM_SUBSCRIPTION_ID: $(az_subscription1)
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

# Approve
- stage: Approve
  displayName: Approve
  jobs:
  - job: approve
    displayName: Wait for approval
    pool: server
    steps: 
    - task: ManualValidation@0
      timeoutInMinutes: 60
      inputs:
        notifyUsers: 'bauebrett1@gmail.com'
        instructions: 'Review the plan in the next hour'

- stage: Apply
  displayName: Apply
  jobs:
  - job: apply
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: tfinstall
      inputs:
        terraformVersion: 'latest'
    
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only

  # Init
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform2connection'
        backendAzureRmResourceGroupName: 'AZLabs'
        backendAzureRmStorageAccountName: '$(storageaccount)'
        backendAzureRmContainerName: '$(containername)'
        backendAzureRmKey: '$(terraformkey)'

  # Apply
    - task: TerraformCLI@0
      displayName: Apply Terraform Deployment
      env:
        ARM_CLIENT_ID: $(az_clientid)
        ARM_CLIENT_SECRET: $(terraform1)
        ARM_TENANT_ID: $(az_tenantid)
        ARM_SUBSCRIPTION_ID: $(az_subscription1)
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        commandOptions: '-auto-approve'
    